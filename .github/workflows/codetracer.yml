name: Codetracer CI
on:
  push:
    branches:
      - main
    tags:
      - "*.*.*"
  pull_request:

jobs:
  lint-bash:
    runs-on: [self-hosted, nixos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default -c ./ci/lint/bash.sh"

  lint-nim:
    runs-on: [self-hosted, nixos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default -c ./ci/lint/nim.sh"

  lint-nix:
    runs-on: [self-hosted, nixos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default -c ./ci/lint/nix.sh"

  lint-rust:
    runs-on: [self-hosted, nixos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default -c ./ci/lint/rust.sh"

  lint-ui-tests:
    runs-on: [self-hosted, nixos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default -c ./ci/lint/ui-tests.sh"

  dev-build:
    runs-on: [self-hosted, nixos]
    needs:
      - lint-bash
      - lint-nim
      - lint-nix
      - lint-rust
      - lint-ui-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default --command ./ci/build/dev.sh"

  nix-build:
    runs-on: [self-hosted, nixos]
    needs:
      - lint-bash
      - lint-nim
      - lint-nix
      - lint-rust
      - lint-ui-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default --command ./ci/build/nix.sh"

  appimage-build:
    runs-on: [self-hosted, nixos]
    needs:
      - lint-bash
      - lint-nim
      - lint-nix
      - lint-rust
      - lint-ui-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - name: Build
        run: "nix develop .#devShells.x86_64-linux.default --command ./ci/build/appimage.sh"

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY }}
        run: |
          nix develop .#devShells.x86_64-linux.default --command aws --endpoint-url=${{ secrets.R2_CODETRACER_BUCKET_S3_ENDPOINT }} s3 cp CodeTracer.AppImage s3://${{ vars.R2_CODETRACER_BUCKET_NAME }}/CodeTracer-${{ github.ref_name }}-amd64.AppImage

  dmg-build:
    runs-on: macos-latest
    needs:
      - lint-bash
      - lint-nim
      - lint-nix
      - lint-rust
      - lint-ui-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build
        run: ./ci/build/dmg.sh

      - name: Install AWS CLI
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        run: brew install awscli

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY }}
        run: |
          # for now apply workaround from https://community.cloudflare.com/t/an-error-occurred-internalerror-when-calling-the-putobject-operation/764905/11:
          #   adding `--checksum-algorithm CRC32`
          aws --endpoint-url=${{ secrets.R2_CODETRACER_BUCKET_S3_ENDPOINT }} s3 cp ./non-nix-build/CodeTracer.dmg s3://${{ vars.R2_CODETRACER_BUCKET_NAME }}/CodeTracer-${{ github.ref_name }}-arm64.dmg --checksum-algorithm CRC32

  dmg-lib-check:
    runs-on: macos-latest
    needs:
      - dmg-build
    steps:
      - name: Install AWS CLI
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        run: brew install awscli

      - name: Install 7zip
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        run: brew install sevenzip

      - name: Download artifact
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY }}
        run: |
          aws --endpoint-url=${{ secrets.R2_CODETRACER_BUCKET_S3_ENDPOINT }} s3 cp s3://${{ vars.R2_CODETRACER_BUCKET_NAME }}/CodeTracer-${{ github.ref_name }}-arm64.dmg ./CodeTracer.dmg

      - name: Extract dmg
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY }}
        run: |
          7zz x ./CodeTracer.dmg

      - name: Check if ct starts
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY }}
        run: |
          ./CodeTracer/CodeTracer.app/Contents/MacOS/bin/ct --version

  appimage-lib-check:
    runs-on: ubuntu-latest
    needs:
      - appimage-build
    steps:
      - name: Install AWS CLI
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        run: sudo snap install aws-cli --classic

      - name: Install FUSE
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        run: sudo apt-get install -y fuse libfuse2

      - name: Download artifact
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY }}
        run: |
          aws --endpoint-url=${{ secrets.R2_CODETRACER_BUCKET_S3_ENDPOINT }} s3 cp s3://${{ vars.R2_CODETRACER_BUCKET_NAME }}/CodeTracer-${{ github.ref_name }}-amd64.AppImage ./CodeTracer.AppImage

      - name: Check if ct starts
        if: startsWith(github.ref, 'refs/tags/') && ${{ !github.event.codetracer-ci }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_CODETRACER_BUCKET_ACCESS_KEY }}
        run: |
          chmod +x ./CodeTracer.AppImage
          ./CodeTracer.AppImage --version

  test-rust:
    runs-on: [self-hosted, nixos]
    needs:
      - dev-build
      - nix-build
      - appimage-build
      - dmg-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default --command ./ci/test/rust.sh"

  test-ui-tests:
    runs-on: [self-hosted, nixos]
    needs:
      - dev-build
      - nix-build
      - appimage-build
      - dmg-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default --command ./ci/test/ui-tests.sh"

  push-to-cachix:
    runs-on: [self-hosted, nixos]
    needs:
      - test-rust
      - test-ui-tests
      - appimage-lib-check
      - dmg-lib-check
    if: github.ref == 'refs/heads/main' && ${{ !github.event.codetracer-ci }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default --command ./ci/deploy/build-nix-and-push-to-cachix.sh"

  build-and-deploy-docs:
    runs-on: [self-hosted, nixos]
    needs: [push-to-cachix]
    if: github.ref == 'refs/heads/main' && ${{ !github.event.codetracer-ci }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - run: "nix develop .#devShells.x86_64-linux.default --command ./ci/deploy/docs.sh"
  create-release:
    runs-on: [ self-hosted, nixos ]
    needs: [ dev-build, nix-build, appimage-build, dmg-build ]
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, '-')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: metacraft-labs/nixos-modules/.github/install-nix@main
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}
      - name: Create resource tarball
        run: nix develop .#devShells.x86_64-linux.default --command bash -c "tar cfJ resources.tar.xz resources/"
      - name: Get changelog text
        id: changelog
        run: |
          nix develop .#devShells.x86_64-linux.default --command bash -c "awk '/^## /{if (p) exit; p=1} p' CHANGELOG.md > release_changelog.md"
          echo "\

          We're actively working on multiple exciting features, which are not yet fully released. Stay tuned!

          [![Download AppImage](https://img.shields.io/badge/Download-Linux%20AppImage-blue?style=for-the-badge)](https://downloads.codetracer.com/CodeTracer-${{ github.ref_name }}-amd64.AppImage)
          [![Download macOS](https://img.shields.io/badge/Download-macOS-blue?style=for-the-badge)](https://downloads.codetracer.com/CodeTracer-${{ github.ref_name }}-arm64.dmg)" >> release_changelog.md
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: "release_changelog.md"
          draft: true
          prerelease: false
          files: resources.tar.xz
          generate_release_notes: false
