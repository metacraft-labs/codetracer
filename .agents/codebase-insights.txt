# Codebase insights
- Ruby loops were originally detected only for 'while' and 'until'.
- 'each' loops can be recognized by handling 'call' nodes with a block whose method name is 'each'.
- Added a regression test ensuring `ExprLoader` detects Ruby `each` loops correctly.
- The `tui` crate contains a sample trace under `src/tui/trace/` used for basic testing.
- The Debug Adapter Protocol client communicates over a Unix domain socket using the same framing protocol, implemented in `src/tui/src/dap_client.rs`.
- Added initial SetBreakpoints handling in db-backend DAP server.
- When using the DAP stdio transport, all diagnostic output must go to stderr
  to avoid corrupting the message stream.
- `DapParser` now buffers data via `add_bytes` and exposes parsed payloads with
  `get_message()`, so callers need to drain messages until `None` after feeding
  new bytes.


- The db-backend DAP server now responds to the `configurationDone` request.

- Electron lifecycle: the backend-manager process is spawned in
  `src/frontend/index.nim` during `ready()`. Previously, it was only stopped
  via an explicit UI action. We now centralize cleanup with `stopBackendManager()`
  and hook it to `app.on('before-quit')`, `app.on('window-all-closed')`, and
  Node process signals (`SIGINT`, `SIGTERM`, `SIGHUP`) to ensure the process
  is always terminated when the app exits.
- `ct record` now prefers `CODETRACER_PYTHON_INTERPRETER`, `PYTHON_EXECUTABLE`, `PYTHONEXECUTABLE`, or PATH resolution to locate the Python runtime before delegating to the db backend, and `db-backend-record` expects the resolved interpreter via `--python-interpreter` when launching the recorder.
- `ct record` resolves Python via env vars (`CODETRACER_PYTHON_INTERPRETER`, `PYTHON_EXECUTABLE`, `PYTHONEXECUTABLE`, `PYTHON`) before checking PATH. When falling back to PATH we now call `findExe(..., followSymlinks=false)` so virtualenv launchers keep their original location and `pyvenv.cfg` remains discoverable.
- Interpreter overrides (e.g. `CODETRACER_PYTHON_INTERPRETER`) are now treated as authoritative; if the configured path cannot be resolved we error instead of silently falling back to PATH.
- `ct record` verifies that `codetracer_python_recorder` is importable before launching the db backend and prints actionable guidance if the module is missing or broken.
- Sudoku test-program datasets include intentionally invalid boards (e.g., examples #3 and #6) with duplicate digits inside a sub-grid; solvers should detect and report these gracefully.
- UI tests rely on `CODETRACER_WRAP_ELECTRON=1`, so `wrapElectron()` must populate `LINKS_PATH_DIR` and `NIX_CODETRACER_EXE_DIR` before `execv`; otherwise the Electron renderer cannot locate `backend-manager`.
- The `ct host` CLI expects options in the `--flag=value` form; passing space-delimited values (e.g. `--frontend-socket 1234`) leaves the value empty and the command falls back to default ports, so parallel hosts collide.
- `ct host` exposes a single socket.io listener; keep `--frontend-socket` equal to `--backend-socket-port` when launching multiple hosts so the browser connects to the active socket server.
- `ui-tests-playground` scenarios can execute in parallel as long as each uses its own Electron/Playwright session and model instance; build fresh selectors per test rather than copying unverified page objects from `ui-tests`.
- `ui-tests-playground` will adopt a Microsoft.Extensions.Hosting bootstrap with Options-based `AppSettings` (see ui-tests-playground/docs/settings-infrastructure.md) so per-run configuration overrides are DI-friendly for CI and agent workflows.
- `ui-tests` now mirrors that host bootstrap: `Program.cs` wires `AppSettings` into `Execution/TestExecutionPipeline`, fanning out each scenario across both Electron and Web executors while `Runner.MaxParallelInstances` (and the `--max-parallel` CLI flag) throttle concurrency.
- `Infrastructure/CodetracerLauncher.RecordProgramAsync` accepts Noir directories as well as Ruby/Python files, matching `ct record` semantics; when `Web.DefaultTraceDirectory` is unset it falls back to `~/.local/share/codetracer`.
- `trace_index.ensureDB` enables SQLite WAL mode and a 60s busy timeout so parallel `ct record` processes wait on locks instead of failing with “database is locked”.
- Scratchpad entries are sourced from multiple panes via `InternalAddToScratchpad`: calltrace arguments, flow before/after values, trace table rows, editor trace results, and value tooltips/context menus all emit that event, so UI tests should cover each surface explicitly.
- Most panes use the global `#context-menu-container` element for menu actions, but the filesystem tree relies on jstree's `#vakata-contextmenu`, so page objects/tests need to open the correct container.
- launch ui-tests commands through `direnv exec .` (or an equivalent `nix shell`) so the flake-provided dotnet toolchain and Playwright node runtime land on PATH; invoking `dotnet` directly from `bash -lc` skips direnv hooks.
- The default `appsettings.json` only wires Noir scenarios; to exercise ProgramAgnostic tests, supply a custom config overriding `Scenarios` and pass it via `--config=/abs/path`.
- Electron and Web builds use different keyboard shortcuts for command palette and Monaco actions; until we emit platform-aware chords, keep those program-agnostic tests commented out in `Execution/TestRegistry`.
- Call trace navigation currently requires expanding the parent entry; even with expanded children the UI may ignore single clicks, so tests now fall back to double-clicks/forced clicks and still rely on Monaco updates—further instrumentation of the renderer may be needed.
- Use `UiTests.Utils.DebugLogger` (default `ui-tests/bin/Debug/net8.0/ui-tests-debug.log`, override with `UITESTS_DEBUG_LOG`) to trace retry loops and click attempts—`RetryHelpers` and key page objects now emit detailed timestamps.
