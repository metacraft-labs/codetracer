# Codebase insights
- Ruby loops were originally detected only for 'while' and 'until'.
- 'each' loops can be recognized by handling 'call' nodes with a block whose method name is 'each'.
- Added a regression test ensuring `ExprLoader` detects Ruby `each` loops correctly.
- The `tui` crate contains a sample trace under `src/tui/trace/` used for basic testing.
- The Debug Adapter Protocol client communicates over a Unix domain socket using the same framing protocol, implemented in `src/tui/src/dap_client.rs`.
- Added initial SetBreakpoints handling in db-backend DAP server.
- When using the DAP stdio transport, all diagnostic output must go to stderr
  to avoid corrupting the message stream.


- The db-backend DAP server now responds to the `configurationDone` request.

- Build scripts across the project now rely on electron-builder to produce
  platform-specific Electron binaries. On macOS the builder consumes
  `resources/CodeTracer.icns` and `Info.plist` for proper branding.
- Electron builds run from the `node-packages` directory; `package.json`
  now lists `electron` as a dev dependency and defines a `postinstall` step to
  ensure native modules match the bundled Electron version.
- macOS bundles from electron-builder are written to architecture-specific
  subdirectories (e.g. `dist/mac-arm64`); scripts should locate the correct
  directory before copying the `.app` bundle.
- Updating Electron or other dependencies requires regenerating `yarn.lock` and updating `yarn-project.nix` with the new cache hash.
- Nix-based builds skip Electron's binary download by exporting
  `ELECTRON_SKIP_BINARY_DOWNLOAD=1` and provide the runtime via
  `ELECTRON_OVERRIDE_DIST_PATH` pointing at `pkgs.electron_33` for offline builds.
- Setting `npm_config_electron_skip_binary_download=1` alongside
  `ELECTRON_SKIP_BINARY_DOWNLOAD` prevents Electron's install script from
  reaching out to the network during Yarn installs.
- electron-builder now relies on its default Electron location instead of
  a custom `electronDist`, avoiding "corrupted Electron dist" errors on
  macOS.
- The flake permits `electron-33.4.11` as an insecure package; update
  `permittedInsecurePackages` when bumping Electron.
- Electron-builder requires the Nim-compiled `index.js` to exist and a local
  `node_modules` tree; build scripts now generate `index.js` and expose
  `node_modules` before invoking the packager.
- Yarn installs must run from `node-packages`; creating `node_modules` at the
  repository root causes read-only filesystem errors. When needed, symlink the
  directory back to the root.
- Nim CLI commands require an explicit subcommand like `js`; missing it leads
  to "invalid command" errors during build scripts.
