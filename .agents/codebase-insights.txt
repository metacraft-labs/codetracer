# Codebase insights
- Ruby loops were originally detected only for 'while' and 'until'.
- 'each' loops can be recognized by handling 'call' nodes with a block whose method name is 'each'.
- Added a regression test ensuring `ExprLoader` detects Ruby `each` loops correctly.
- The `tui` crate contains a sample trace under `src/tui/trace/` used for basic testing.
- The Debug Adapter Protocol client communicates over a Unix domain socket using the same framing protocol, implemented in `src/tui/src/dap_client.rs`.
- Added initial SetBreakpoints handling in db-backend DAP server.
- When using the DAP stdio transport, all diagnostic output must go to stderr
  to avoid corrupting the message stream.
- `DapParser` now buffers data via `add_bytes` and exposes parsed payloads with
  `get_message()`, so callers need to drain messages until `None` after feeding
  new bytes.


- The db-backend DAP server now responds to the `configurationDone` request.

- Electron lifecycle: the backend-manager process is spawned in
  `src/frontend/index.nim` during `ready()`. Previously, it was only stopped
  via an explicit UI action. We now centralize cleanup with `stopBackendManager()`
  and hook it to `app.on('before-quit')`, `app.on('window-all-closed')`, and
  Node process signals (`SIGINT`, `SIGTERM`, `SIGHUP`) to ensure the process
  is always terminated when the app exits.
- `ct record` now prefers `CODETRACER_PYTHON_INTERPRETER`, `PYTHON_EXECUTABLE`, `PYTHONEXECUTABLE`, or PATH resolution to locate the Python runtime before delegating to the db backend, and `db-backend-record` expects the resolved interpreter via `--python-interpreter` when launching the recorder.
- `ct record` resolves Python via env vars (`CODETRACER_PYTHON_INTERPRETER`, `PYTHON_EXECUTABLE`, `PYTHONEXECUTABLE`, `PYTHON`) before checking PATH. When falling back to PATH we now call `findExe(..., followSymlinks=false)` so virtualenv launchers keep their original location and `pyvenv.cfg` remains discoverable.
- Interpreter overrides (e.g. `CODETRACER_PYTHON_INTERPRETER`) are now treated as authoritative; if the configured path cannot be resolved we error instead of silently falling back to PATH.
- `ct record` verifies that `codetracer_python_recorder` is importable before launching the db backend and prints actionable guidance if the module is missing or broken.
- Sudoku test-program datasets include intentionally invalid boards (e.g., examples #3 and #6) with duplicate digits inside a sub-grid; solvers should detect and report these gracefully.
- `ct remote` shells out to `ct-remote`, first checking alongside the `ct` binary and then falling back to the user's PATH if needed; errors are surfaced with actionable messaging when the binary is missing.
