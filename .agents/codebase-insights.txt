# Codebase insights
- Ruby loops were originally detected only for 'while' and 'until'.
- 'each' loops can be recognized by handling 'call' nodes with a block whose method name is 'each'.
- Added a regression test ensuring `ExprLoader` detects Ruby `each` loops correctly.
- The `tui` crate contains a sample trace under `src/tui/trace/` used for basic testing.
- The Debug Adapter Protocol client communicates over a Unix domain socket using the same framing protocol, implemented in `src/tui/src/dap_client.rs`.
- Added initial SetBreakpoints handling in db-backend DAP server.
- When using the DAP stdio transport, all diagnostic output must go to stderr
  to avoid corrupting the message stream.
- `DapParser` now buffers data via `add_bytes` and exposes parsed payloads with
  `get_message()`, so callers need to drain messages until `None` after feeding
  new bytes.


- The db-backend DAP server now responds to the `configurationDone` request.

- Electron lifecycle: the backend-manager process is spawned in
  `src/frontend/index.nim` during `ready()`. Previously, it was only stopped
  via an explicit UI action. We now centralize cleanup with `stopBackendManager()`
  and hook it to `app.on('before-quit')`, `app.on('window-all-closed')`, and
  Node process signals (`SIGINT`, `SIGTERM`, `SIGHUP`) to ensure the process
  is always terminated when the app exits.
- Synthetic diff stressor: `test-programs/rb_big_lorem_ipusum` mirrors the repo's breadth with a 60k+ line payload generator to expose multi-file diff edge cases.
- `Core::Simulations::CallStorm` inside `rb_big_lorem_ipusum` drives a deep recursive call graph with heavy logging to exercise call-trace visualizations.
- Iteration-heavy code paths in `rb_big_lorem_ipusum` are now capped (e.g. 3 ships, top-3 samples in the dashboard) so `run_all.rb` completes quickly during manual UI tests.
