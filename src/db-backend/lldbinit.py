# GENERATED BY `RR`: rr lldbinit
#   supposedly we assume MIT License as RR
# TODO: maybe autogenerate in replay

# This is a Python script. Save it to a file and run it from LLDB using
#     script exec(open('<filename>').read())
# or similar.

def hex_unescape(string):
    str_len = len(string)
    if str_len % 2: # check for unexpected string length
        return ""
    result = bytearray()
    try:
        pos = 0
        while pos < str_len:
            hex_char = string[pos:pos+2]
            result.append(int(hex_char, 16))
            pos += 2
    except: # check for unexpected string value
        return ""
    return result.decode('utf-8')

def hex_escape(string):
    result = ""
    for curr_char in string.encode('utf-8'):
        if isinstance(curr_char, str):
            curr_char = ord(curr_char)
        result += format(curr_char, '02x')
    return result


import lldb
import re
import shlex

def run_command_and_get_output(debugger, command):
    result = lldb.SBCommandReturnObject()
    debugger.GetCommandInterpreter().HandleCommand(command, result)
    assert result.Succeeded()
    return result.GetOutput()

def command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args):
    interpreter = debugger.GetCommandInterpreter()
    args = shlex.split(command)
    # Ensure lldb tells rr its current thread
    curr_thread = exe_ctx.thread
    cmd_prefix = ("process plugin packet send qRRCmd:%s:%d"%
        (cmd_name, -1 if curr_thread is None else curr_thread.GetThreadID()))
    arg_strs = []
    for auto_arg in auto_args:
        arg_strs.append(":" + hex_escape(run_command_and_get_output(debugger, auto_arg)))
    for arg in args:
        arg_strs.append(":" + hex_escape(arg))
    rv = run_command_and_get_output(debugger, cmd_prefix + ''.join(arg_strs));
    rv_match = re.search('response: (.*)$', rv, re.MULTILINE);
    if not rv_match:
        result.SetError(None, "Invalid response: %s" % rv)
        return
    response = hex_unescape(rv_match.group(1))
    result.Print(response.strip())

def rr_command_elapsed_time(debugger, command, exe_ctx, result, internal_dict):
    """Print elapsed time (in seconds) since the start of the trace, in the 'record' timeline."""
    cmd_name = 'elapsed-time'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_elapsed_time elapsed-time')

def rr_command_when(debugger, command, exe_ctx, result, internal_dict):
    """Print the number of the last completely replayed rr event."""
    cmd_name = 'when'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_when when')

def rr_command_when_ticks(debugger, command, exe_ctx, result, internal_dict):
    """Print the current rr tick count for the current thread."""
    cmd_name = 'when-ticks'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_when_ticks when-ticks')

def rr_command_when_tid(debugger, command, exe_ctx, result, internal_dict):
    """Print the real tid for the current thread."""
    cmd_name = 'when-tid'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_when_tid when-tid')

def rr_command_seek_ticks(debugger, command, exe_ctx, result, internal_dict):
    """Print the current rr tick count for the current thread."""
    cmd_name = 'seek-ticks'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_seek_ticks seek-ticks')

def rr_command_reverse_finish(debugger, command, exe_ctx, result, internal_dict):
    """Print the current rr tick count for the current thread."""
    cmd_name = 'reverse-finish'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_reverse_finish reverse-finish')

def rr_command_rr_history_push(debugger, command, exe_ctx, result, internal_dict):
    """Push an entry into the rr history."""
    cmd_name = 'rr-history-push'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_rr_history_push rr-history-push')

def rr_command_back(debugger, command, exe_ctx, result, internal_dict):
    """Go back one entry in the rr history."""
    cmd_name = 'back'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_back back')

def rr_command_forward(debugger, command, exe_ctx, result, internal_dict):
    """Go forward one entry in the rr history."""
    cmd_name = 'forward'
    auto_args = []
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_forward forward')

def rr_command_checkpoint(debugger, command, exe_ctx, result, internal_dict):
    """create a checkpoint representing a point in the execution
use the 'restart' command to return to the checkpoint"""
    cmd_name = 'checkpoint'
    auto_args = ['rr-where']
    command_impl(debugger, command, exe_ctx, result, cmd_name, auto_args)

lldb.debugger.HandleCommand('command script add -f rr_command_checkpoint checkpoint')

lldb.debugger.HandleCommand('set set prompt "(rr) "')
